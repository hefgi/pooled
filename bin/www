#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('pooledcoin:server');
const http = require('http');
const Web3 = require('web3');
const truffleConnect = require('../controllers/poolController.js');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const aPort = parseInt(val, 10);

  if (Number.isNaN(aPort)) {
    // named pipe
    return val;
  }

  if (aPort >= 0) {
    // port number
    return aPort;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);

  if (typeof web3 !== 'undefined') {
    console.warn('Using web3 detected from external source.');
    // Use Mist/MetaMask's provider
    /* eslint-disable */
    truffleConnect.web3 = new Web3(web3.currentProvider); 
    /* eslint-enable */
  } else {
    console.warn('No web3 detected. Falling back to http://127.0.0.1:7545. You should remove this fallback when you deploy live, as its inherently insecure. Consider switching to Metamask for development.');
    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
    truffleConnect.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:7545'));
  }
  console.log(`Express Listening at http://localhost:${port}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

